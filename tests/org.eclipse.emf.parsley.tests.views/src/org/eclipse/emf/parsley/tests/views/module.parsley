import org.eclipse.emf.common.util.URI
import org.eclipse.emf.parsley.resource.ResourceSaveStrategy
import org.eclipse.emf.parsley.resource.ValidateBeforeSaveStrategy
import org.eclipse.emf.parsley.tests.models.testmodels.ClassForControls
import org.eclipse.emf.parsley.tests.models.testmodels.TestmodelsFactory
import org.eclipse.emf.parsley.tests.models.testmodels.TestmodelsPackage
import org.eclipse.emf.parsley.tests.views.ViewsSaveableEditableTableView
import org.eclipse.emf.parsley.tests.views.ViewsSaveableTreeFormView
import org.eclipse.emf.parsley.tests.views.ViewsSaveableTreeView
import org.eclipse.emf.parsley.viewers.TableViewerColumnBuilder
import org.eclipse.emf.parsley.viewers.TableViewerEditableColumnBuilder

/**
 * Defines Parsley parts acting on parsley.tests.models,
 * for testing purposes.
 * 
 * The resources edited by these views are expected to be found
 * on a project called "MyTestProject" in the workbench.
 */
module org.eclipse.emf.parsley.tests.views {
	
	parts {
		viewpart org.eclipse.emf.parsley.tests.views {
			viewname "Test Model Tree Form View"
			viewclass ViewsSaveableTreeFormView
		}
		viewpart org.eclipse.emf.parsley.tests.treeviews {
			viewname "Test Model Tree View"
			viewclass ViewsSaveableTreeView
		}
		viewpart org.eclipse.emf.parsley.tests.editabletable {
			viewname "Test Model Editable Table View"
			viewclass ViewsSaveableEditableTableView
		}
	}
	
	bindings {
		type ResourceSaveStrategy -> ValidateBeforeSaveStrategy
		type TableViewerColumnBuilder -> TableViewerEditableColumnBuilder
	}
	
	configurator {
		resourceURI {
			ViewsSaveableTreeFormView -> {
				return URI.createURI("platform:/resource/MyTestProject/TestContainer.xmi");
			}
			ViewsSaveableTreeView -> {
				return URI.createURI("platform:/resource/MyTestProject/TestContainerForDnD.xmi");
			}
			ViewsSaveableEditableTableView -> {
				return URI.createURI("platform:/resource/MyTestProject/TestContainer.xmi");
			}
		}
		eClass {
			ViewsSaveableEditableTableView -> {
				TestmodelsPackage.Literals.CLASS_FOR_CONTROLS
			}
		}
	}
	
	resourceManager {
		val factory = TestmodelsFactory.eINSTANCE
		
		initializeResource {
			getContents += factory.createTestContainer => [
				classesForControls += factory.createClassForControls
				classesWithName += factory.createClassWithName => [name="First Class With Name"]
				classesWithName += factory.createClassWithName => [name="Second Class With Name"]
			]
		}
	}
	
	tableFeaturesProvider {
		features {
			// we specify the features in the give order so that we can refer
			// to the corresponding column in the SWTBot test for editable tables
			// IMPORTANT: changing the order will break the SWTBot test
			ClassForControls -> 
				booleanFeature, booleanObjectFeature, booleanDataTypeFeature,
				booleanPrimitiveDataTypeFeature,
				enumFeature,
				stringFeature, stringDataTypeFeature, stringFeatureWithDefault,
				bigDecimalFeature, bigIntegerFeature,
				doubleFeature, doubleObjectFeature,
				intFeature, intObjectFeature,
				floatFeature ,floatObjectFeature,
				shortFeature, shortObjectFeature,
				byteFeature, byteObjectFeature,
				dateFeature,
				referenceToClassWithName, multiReferenceFeature
		}
	}
}
