/*
* generated by Xtext
*/
package org.eclipse.emf.parsley.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EmfParsleyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_0_0 = (RuleCall)cImportSectionAssignment_0.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleModuleParserRuleCall_1_0 = (RuleCall)cModuleAssignment_1.eContents().get(0);
		
		//Model:
		//	importSection=XImportSection? module=Module;
		public ParserRule getRule() { return rule; }

		//importSection=XImportSection? module=Module
		public Group getGroup() { return cGroup; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_0() { return cImportSectionAssignment_0; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_0_0() { return cImportSectionXImportSectionParserRuleCall_0_0; }

		//module=Module
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//Module
		public RuleCall getModuleModuleParserRuleCall_1_0() { return cModuleModuleParserRuleCall_1_0; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExtendsClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExtendsClauseExtendsClauseParserRuleCall_2_0 = (RuleCall)cExtendsClauseAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Assignment cLabelProviderAssignment_4_0 = (Assignment)cUnorderedGroup_4.eContents().get(0);
		private final RuleCall cLabelProviderLabelProviderParserRuleCall_4_0_0 = (RuleCall)cLabelProviderAssignment_4_0.eContents().get(0);
		private final Assignment cPropertyDescriptionProviderAssignment_4_1 = (Assignment)cUnorderedGroup_4.eContents().get(1);
		private final RuleCall cPropertyDescriptionProviderPropertyDescriptionProviderParserRuleCall_4_1_0 = (RuleCall)cPropertyDescriptionProviderAssignment_4_1.eContents().get(0);
		private final Assignment cFeaturesProviderAssignment_4_2 = (Assignment)cUnorderedGroup_4.eContents().get(2);
		private final RuleCall cFeaturesProviderFeaturesProviderParserRuleCall_4_2_0 = (RuleCall)cFeaturesProviderAssignment_4_2.eContents().get(0);
		private final Assignment cFormControlFactoryAssignment_4_3 = (Assignment)cUnorderedGroup_4.eContents().get(3);
		private final RuleCall cFormControlFactoryFormControlFactoryParserRuleCall_4_3_0 = (RuleCall)cFormControlFactoryAssignment_4_3.eContents().get(0);
		private final Assignment cProposalCreatorAssignment_4_4 = (Assignment)cUnorderedGroup_4.eContents().get(4);
		private final RuleCall cProposalCreatorProposalCreatorParserRuleCall_4_4_0 = (RuleCall)cProposalCreatorAssignment_4_4.eContents().get(0);
		private final Assignment cViewerContentProviderAssignment_4_5 = (Assignment)cUnorderedGroup_4.eContents().get(5);
		private final RuleCall cViewerContentProviderViewerContentProviderParserRuleCall_4_5_0 = (RuleCall)cViewerContentProviderAssignment_4_5.eContents().get(0);
		private final Group cGroup_4_6 = (Group)cUnorderedGroup_4.eContents().get(6);
		private final Keyword cPartsKeyword_4_6_0 = (Keyword)cGroup_4_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_6_1 = (Keyword)cGroup_4_6.eContents().get(1);
		private final Assignment cPartsAssignment_4_6_2 = (Assignment)cGroup_4_6.eContents().get(2);
		private final RuleCall cPartsPartSpecificationParserRuleCall_4_6_2_0 = (RuleCall)cPartsAssignment_4_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_6_3 = (Keyword)cGroup_4_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Module:
		//	"module" name=QualifiedName extendsClause=ExtendsClause? "{" (labelProvider=LabelProvider? &
		//	propertyDescriptionProvider=PropertyDescriptionProvider? & featuresProvider=FeaturesProvider? &
		//	formControlFactory=FormControlFactory? & proposalCreator=ProposalCreator? &
		//	viewerContentProvider=ViewerContentProvider? & ("parts" "{" parts+=PartSpecification* "}")?) "}";
		public ParserRule getRule() { return rule; }

		//"module" name=QualifiedName extendsClause=ExtendsClause? "{" (labelProvider=LabelProvider? &
		//propertyDescriptionProvider=PropertyDescriptionProvider? & featuresProvider=FeaturesProvider? &
		//formControlFactory=FormControlFactory? & proposalCreator=ProposalCreator? &
		//viewerContentProvider=ViewerContentProvider? & ("parts" "{" parts+=PartSpecification* "}")?) "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//extendsClause=ExtendsClause?
		public Assignment getExtendsClauseAssignment_2() { return cExtendsClauseAssignment_2; }

		//ExtendsClause
		public RuleCall getExtendsClauseExtendsClauseParserRuleCall_2_0() { return cExtendsClauseExtendsClauseParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//labelProvider=LabelProvider? & propertyDescriptionProvider=PropertyDescriptionProvider? &
		//featuresProvider=FeaturesProvider? & formControlFactory=FormControlFactory? & proposalCreator=ProposalCreator? &
		//viewerContentProvider=ViewerContentProvider? & ("parts" "{" parts+=PartSpecification* "}")?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//labelProvider=LabelProvider?
		public Assignment getLabelProviderAssignment_4_0() { return cLabelProviderAssignment_4_0; }

		//LabelProvider
		public RuleCall getLabelProviderLabelProviderParserRuleCall_4_0_0() { return cLabelProviderLabelProviderParserRuleCall_4_0_0; }

		//propertyDescriptionProvider=PropertyDescriptionProvider?
		public Assignment getPropertyDescriptionProviderAssignment_4_1() { return cPropertyDescriptionProviderAssignment_4_1; }

		//PropertyDescriptionProvider
		public RuleCall getPropertyDescriptionProviderPropertyDescriptionProviderParserRuleCall_4_1_0() { return cPropertyDescriptionProviderPropertyDescriptionProviderParserRuleCall_4_1_0; }

		//featuresProvider=FeaturesProvider?
		public Assignment getFeaturesProviderAssignment_4_2() { return cFeaturesProviderAssignment_4_2; }

		//FeaturesProvider
		public RuleCall getFeaturesProviderFeaturesProviderParserRuleCall_4_2_0() { return cFeaturesProviderFeaturesProviderParserRuleCall_4_2_0; }

		//formControlFactory=FormControlFactory?
		public Assignment getFormControlFactoryAssignment_4_3() { return cFormControlFactoryAssignment_4_3; }

		//FormControlFactory
		public RuleCall getFormControlFactoryFormControlFactoryParserRuleCall_4_3_0() { return cFormControlFactoryFormControlFactoryParserRuleCall_4_3_0; }

		//proposalCreator=ProposalCreator?
		public Assignment getProposalCreatorAssignment_4_4() { return cProposalCreatorAssignment_4_4; }

		//ProposalCreator
		public RuleCall getProposalCreatorProposalCreatorParserRuleCall_4_4_0() { return cProposalCreatorProposalCreatorParserRuleCall_4_4_0; }

		//viewerContentProvider=ViewerContentProvider?
		public Assignment getViewerContentProviderAssignment_4_5() { return cViewerContentProviderAssignment_4_5; }

		//ViewerContentProvider
		public RuleCall getViewerContentProviderViewerContentProviderParserRuleCall_4_5_0() { return cViewerContentProviderViewerContentProviderParserRuleCall_4_5_0; }

		//("parts" "{" parts+=PartSpecification* "}")?
		public Group getGroup_4_6() { return cGroup_4_6; }

		//"parts"
		public Keyword getPartsKeyword_4_6_0() { return cPartsKeyword_4_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_6_1() { return cLeftCurlyBracketKeyword_4_6_1; }

		//parts+=PartSpecification*
		public Assignment getPartsAssignment_4_6_2() { return cPartsAssignment_4_6_2; }

		//PartSpecification
		public RuleCall getPartsPartSpecificationParserRuleCall_4_6_2_0() { return cPartsPartSpecificationParserRuleCall_4_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_6_3() { return cRightCurlyBracketKeyword_4_6_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ExtendsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtendsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSuperTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSuperTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cSuperTypeAssignment_1.eContents().get(0);
		
		//ExtendsClause:
		//	"extends" superType=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"extends" superType=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//superType=JvmTypeReference
		public Assignment getSuperTypeAssignment_1() { return cSuperTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getSuperTypeJvmTypeReferenceParserRuleCall_1_0() { return cSuperTypeJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class LabelProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelProviderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLabelProviderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cTextKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cLabelSpecificationsAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cLabelSpecificationsLabelSpecificationParserRuleCall_3_0_2_0 = (RuleCall)cLabelSpecificationsAssignment_3_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cImageKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cImageSpecificationsAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cImageSpecificationsLabelSpecificationParserRuleCall_3_1_2_0 = (RuleCall)cImageSpecificationsAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LabelProvider:
		//	{LabelProvider} "labelProvider" "{" (("text" "{" labelSpecifications+=LabelSpecification* "}")? & ("image" "{"
		//	imageSpecifications+=LabelSpecification* "}")?) "}";
		public ParserRule getRule() { return rule; }

		//{LabelProvider} "labelProvider" "{" (("text" "{" labelSpecifications+=LabelSpecification* "}")? & ("image" "{"
		//imageSpecifications+=LabelSpecification* "}")?) "}"
		public Group getGroup() { return cGroup; }

		//{LabelProvider}
		public Action getLabelProviderAction_0() { return cLabelProviderAction_0; }

		//"labelProvider"
		public Keyword getLabelProviderKeyword_1() { return cLabelProviderKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("text" "{" labelSpecifications+=LabelSpecification* "}")? & ("image" "{" imageSpecifications+=LabelSpecification* "}")?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("text" "{" labelSpecifications+=LabelSpecification* "}")?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"text"
		public Keyword getTextKeyword_3_0_0() { return cTextKeyword_3_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_1() { return cLeftCurlyBracketKeyword_3_0_1; }

		//labelSpecifications+=LabelSpecification*
		public Assignment getLabelSpecificationsAssignment_3_0_2() { return cLabelSpecificationsAssignment_3_0_2; }

		//LabelSpecification
		public RuleCall getLabelSpecificationsLabelSpecificationParserRuleCall_3_0_2_0() { return cLabelSpecificationsLabelSpecificationParserRuleCall_3_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_3() { return cRightCurlyBracketKeyword_3_0_3; }

		//("image" "{" imageSpecifications+=LabelSpecification* "}")?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"image"
		public Keyword getImageKeyword_3_1_0() { return cImageKeyword_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1_1() { return cLeftCurlyBracketKeyword_3_1_1; }

		//imageSpecifications+=LabelSpecification*
		public Assignment getImageSpecificationsAssignment_3_1_2() { return cImageSpecificationsAssignment_3_1_2; }

		//LabelSpecification
		public RuleCall getImageSpecificationsLabelSpecificationParserRuleCall_3_1_2_0() { return cImageSpecificationsLabelSpecificationParserRuleCall_3_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1_3() { return cRightCurlyBracketKeyword_3_1_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class LabelSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionXExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//LabelSpecification:
		//	parameterType=JvmTypeReference name=ValidID? "->" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference name=ValidID? "->" expression=XExpression
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ValidID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//expression=XExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_3_0() { return cExpressionXExpressionParserRuleCall_3_0; }
	}

	public class PropertyDescriptionProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDescriptionProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyDescriptionProviderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPropertyDescriptionProviderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTextKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLabelSpecificationsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLabelSpecificationsPropertyDescriptionSpecificationParserRuleCall_3_2_0 = (RuleCall)cLabelSpecificationsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PropertyDescriptionProvider:
		//	{PropertyDescriptionProvider} "propertyDescriptionProvider" "{" ("text" "{"
		//	labelSpecifications+=PropertyDescriptionSpecification* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{PropertyDescriptionProvider} "propertyDescriptionProvider" "{" ("text" "{"
		//labelSpecifications+=PropertyDescriptionSpecification* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{PropertyDescriptionProvider}
		public Action getPropertyDescriptionProviderAction_0() { return cPropertyDescriptionProviderAction_0; }

		//"propertyDescriptionProvider"
		public Keyword getPropertyDescriptionProviderKeyword_1() { return cPropertyDescriptionProviderKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("text" "{" labelSpecifications+=PropertyDescriptionSpecification* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"text"
		public Keyword getTextKeyword_3_0() { return cTextKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//labelSpecifications+=PropertyDescriptionSpecification*
		public Assignment getLabelSpecificationsAssignment_3_2() { return cLabelSpecificationsAssignment_3_2; }

		//PropertyDescriptionSpecification
		public RuleCall getLabelSpecificationsPropertyDescriptionSpecificationParserRuleCall_3_2_0() { return cLabelSpecificationsPropertyDescriptionSpecificationParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PropertyDescriptionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDescriptionSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureJvmMemberCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureJvmMemberIDTerminalRuleCall_2_0_1 = (RuleCall)cFeatureJvmMemberCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//PropertyDescriptionSpecification:
		//	parameterType=JvmTypeReference ":" feature=[types::JvmMember] "->" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference ":" feature=[types::JvmMember] "->" expression=XExpression
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//feature=[types::JvmMember]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//[types::JvmMember]
		public CrossReference getFeatureJvmMemberCrossReference_2_0() { return cFeatureJvmMemberCrossReference_2_0; }

		//ID
		public RuleCall getFeatureJvmMemberIDTerminalRuleCall_2_0_1() { return cFeatureJvmMemberIDTerminalRuleCall_2_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }
	}

	public class FeaturesProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeaturesProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeaturesProviderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFeaturesProviderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFeaturesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFeatureSpecificationsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFeatureSpecificationsFeatureSpecificationParserRuleCall_3_2_0 = (RuleCall)cFeatureSpecificationsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FeaturesProvider:
		//	{FeaturesProvider} "featuresProvider" "{" ("features" "{" featureSpecifications+=FeatureSpecification* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{FeaturesProvider} "featuresProvider" "{" ("features" "{" featureSpecifications+=FeatureSpecification* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{FeaturesProvider}
		public Action getFeaturesProviderAction_0() { return cFeaturesProviderAction_0; }

		//"featuresProvider"
		public Keyword getFeaturesProviderKeyword_1() { return cFeaturesProviderKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("features" "{" featureSpecifications+=FeatureSpecification* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"features"
		public Keyword getFeaturesKeyword_3_0() { return cFeaturesKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//featureSpecifications+=FeatureSpecification*
		public Assignment getFeatureSpecificationsAssignment_3_2() { return cFeatureSpecificationsAssignment_3_2; }

		//FeatureSpecification
		public RuleCall getFeatureSpecificationsFeatureSpecificationParserRuleCall_3_2_0() { return cFeatureSpecificationsFeatureSpecificationParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FeatureSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeaturesJvmMemberCrossReference_2_0 = (CrossReference)cFeaturesAssignment_2.eContents().get(0);
		private final RuleCall cFeaturesJvmMemberIDTerminalRuleCall_2_0_1 = (RuleCall)cFeaturesJvmMemberCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFeaturesJvmMemberCrossReference_3_1_0 = (CrossReference)cFeaturesAssignment_3_1.eContents().get(0);
		private final RuleCall cFeaturesJvmMemberIDTerminalRuleCall_3_1_0_1 = (RuleCall)cFeaturesJvmMemberCrossReference_3_1_0.eContents().get(1);
		
		//FeatureSpecification:
		//	parameterType=JvmTypeReference "->" features+=[types::JvmMember] ("," features+=[types::JvmMember])*;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference "->" features+=[types::JvmMember] ("," features+=[types::JvmMember])*
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//features+=[types::JvmMember]
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//[types::JvmMember]
		public CrossReference getFeaturesJvmMemberCrossReference_2_0() { return cFeaturesJvmMemberCrossReference_2_0; }

		//ID
		public RuleCall getFeaturesJvmMemberIDTerminalRuleCall_2_0_1() { return cFeaturesJvmMemberIDTerminalRuleCall_2_0_1; }

		//("," features+=[types::JvmMember])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//features+=[types::JvmMember]
		public Assignment getFeaturesAssignment_3_1() { return cFeaturesAssignment_3_1; }

		//[types::JvmMember]
		public CrossReference getFeaturesJvmMemberCrossReference_3_1_0() { return cFeaturesJvmMemberCrossReference_3_1_0; }

		//ID
		public RuleCall getFeaturesJvmMemberIDTerminalRuleCall_3_1_0_1() { return cFeaturesJvmMemberIDTerminalRuleCall_3_1_0_1; }
	}

	public class FormControlFactoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormControlFactory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormControlFactoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFormControlFactoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cControlKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cControlSpecificationsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cControlSpecificationsFormControlSpecificationParserRuleCall_3_2_0 = (RuleCall)cControlSpecificationsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FormControlFactory:
		//	{FormControlFactory} "formControlFactory" "{" ("control" "{" controlSpecifications+=FormControlSpecification* "}")?
		//	"}";
		public ParserRule getRule() { return rule; }

		//{FormControlFactory} "formControlFactory" "{" ("control" "{" controlSpecifications+=FormControlSpecification* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{FormControlFactory}
		public Action getFormControlFactoryAction_0() { return cFormControlFactoryAction_0; }

		//"formControlFactory"
		public Keyword getFormControlFactoryKeyword_1() { return cFormControlFactoryKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("control" "{" controlSpecifications+=FormControlSpecification* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"control"
		public Keyword getControlKeyword_3_0() { return cControlKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//controlSpecifications+=FormControlSpecification*
		public Assignment getControlSpecificationsAssignment_3_2() { return cControlSpecificationsAssignment_3_2; }

		//FormControlSpecification
		public RuleCall getControlSpecificationsFormControlSpecificationParserRuleCall_3_2_0() { return cControlSpecificationsFormControlSpecificationParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FormControlSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormControlSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureJvmMemberCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureJvmMemberIDTerminalRuleCall_2_0_1 = (RuleCall)cFeatureJvmMemberCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTargetKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTargetAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTargetXExpressionParserRuleCall_5_1_0 = (RuleCall)cTargetAssignment_5_1.eContents().get(0);
		
		//FormControlSpecification:
		//	parameterType=JvmTypeReference ":" feature=[types::JvmMember] "->" expression=XExpression ("target"
		//	target=XExpression)?;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference ":" feature=[types::JvmMember] "->" expression=XExpression ("target" target=XExpression)?
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//feature=[types::JvmMember]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//[types::JvmMember]
		public CrossReference getFeatureJvmMemberCrossReference_2_0() { return cFeatureJvmMemberCrossReference_2_0; }

		//ID
		public RuleCall getFeatureJvmMemberIDTerminalRuleCall_2_0_1() { return cFeatureJvmMemberIDTerminalRuleCall_2_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }

		//("target" target=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"target"
		public Keyword getTargetKeyword_5_0() { return cTargetKeyword_5_0; }

		//target=XExpression
		public Assignment getTargetAssignment_5_1() { return cTargetAssignment_5_1; }

		//XExpression
		public RuleCall getTargetXExpressionParserRuleCall_5_1_0() { return cTargetXExpressionParserRuleCall_5_1_0; }
	}

	public class ProposalCreatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProposalCreator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProposalCreatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProposalsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProposalsSpecificationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProposalsSpecificationsProposalSpecificationParserRuleCall_3_0 = (RuleCall)cProposalsSpecificationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProposalCreator:
		//	{ProposalCreator} "proposals" "{" proposalsSpecifications+=ProposalSpecification* "}";
		public ParserRule getRule() { return rule; }

		//{ProposalCreator} "proposals" "{" proposalsSpecifications+=ProposalSpecification* "}"
		public Group getGroup() { return cGroup; }

		//{ProposalCreator}
		public Action getProposalCreatorAction_0() { return cProposalCreatorAction_0; }

		//"proposals"
		public Keyword getProposalsKeyword_1() { return cProposalsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//proposalsSpecifications+=ProposalSpecification*
		public Assignment getProposalsSpecificationsAssignment_3() { return cProposalsSpecificationsAssignment_3; }

		//ProposalSpecification
		public RuleCall getProposalsSpecificationsProposalSpecificationParserRuleCall_3_0() { return cProposalsSpecificationsProposalSpecificationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ProposalSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProposalSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureJvmMemberCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureJvmMemberIDTerminalRuleCall_2_0_1 = (RuleCall)cFeatureJvmMemberCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//ProposalSpecification:
		//	parameterType=JvmTypeReference ":" feature=[types::JvmMember] "->" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference ":" feature=[types::JvmMember] "->" expression=XExpression
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//feature=[types::JvmMember]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//[types::JvmMember]
		public CrossReference getFeatureJvmMemberCrossReference_2_0() { return cFeatureJvmMemberCrossReference_2_0; }

		//ID
		public RuleCall getFeatureJvmMemberIDTerminalRuleCall_2_0_1() { return cFeatureJvmMemberIDTerminalRuleCall_2_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }
	}

	public class ViewerContentProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewerContentProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cViewerContentProviderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cViewerContentProviderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cChildrenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cChildrenSpecificationsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cChildrenSpecificationsLabelSpecificationParserRuleCall_3_2_0 = (RuleCall)cChildrenSpecificationsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ViewerContentProvider:
		//	{ViewerContentProvider} "viewerContentProvider" "{" ("children" "{" childrenSpecifications+=LabelSpecification* "}")?
		//	"}";
		public ParserRule getRule() { return rule; }

		//{ViewerContentProvider} "viewerContentProvider" "{" ("children" "{" childrenSpecifications+=LabelSpecification* "}")?
		//"}"
		public Group getGroup() { return cGroup; }

		//{ViewerContentProvider}
		public Action getViewerContentProviderAction_0() { return cViewerContentProviderAction_0; }

		//"viewerContentProvider"
		public Keyword getViewerContentProviderKeyword_1() { return cViewerContentProviderKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("children" "{" childrenSpecifications+=LabelSpecification* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"children"
		public Keyword getChildrenKeyword_3_0() { return cChildrenKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//childrenSpecifications+=LabelSpecification*
		public Assignment getChildrenSpecificationsAssignment_3_2() { return cChildrenSpecificationsAssignment_3_2; }

		//LabelSpecification
		public RuleCall getChildrenSpecificationsLabelSpecificationParserRuleCall_3_2_0() { return cChildrenSpecificationsLabelSpecificationParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EmfFeatureAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmfFeatureAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyDescriptionSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFormControlSpecificationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProposalSpecificationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// a utility base class for rules which access features of an EClass
		//EmfFeatureAccess:
		//	PropertyDescriptionSpecification | FeatureSpecification | FormControlSpecification | ProposalSpecification;
		public ParserRule getRule() { return rule; }

		//PropertyDescriptionSpecification | FeatureSpecification | FormControlSpecification | ProposalSpecification
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropertyDescriptionSpecification
		public RuleCall getPropertyDescriptionSpecificationParserRuleCall_0() { return cPropertyDescriptionSpecificationParserRuleCall_0; }

		//FeatureSpecification
		public RuleCall getFeatureSpecificationParserRuleCall_1() { return cFeatureSpecificationParserRuleCall_1; }

		//FormControlSpecification
		public RuleCall getFormControlSpecificationParserRuleCall_2() { return cFormControlSpecificationParserRuleCall_2; }

		//ProposalSpecification
		public RuleCall getProposalSpecificationParserRuleCall_3() { return cProposalSpecificationParserRuleCall_3; }
	}

	public class WithExtendsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithExtendsClause");
		private final RuleCall cModuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// a utility base class for rules with 'extends' clause
		//WithExtendsClause:
		//	Module;
		public ParserRule getRule() { return rule; }

		//Module
		public RuleCall getModuleParserRuleCall() { return cModuleParserRuleCall; }
	}

	public class PartSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartSpecification");
		private final RuleCall cViewSpecificationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PartSpecification:
		//	ViewSpecification;
		public ParserRule getRule() { return rule; }

		//ViewSpecification
		public RuleCall getViewSpecificationParserRuleCall() { return cViewSpecificationParserRuleCall; }
	}

	public class ViewSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cViewSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cViewpartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdQualifiedNameParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cViewnameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cViewNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cViewNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cViewNameAssignment_5.eContents().get(0);
		private final Keyword cViewclassKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cViewcategoryKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cCategoryAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cCategoryQualifiedNameParserRuleCall_8_1_0 = (RuleCall)cCategoryAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ViewSpecification:
		//	{ViewSpecification} "viewpart" id=QualifiedName "{" "viewname" viewName=STRING "viewclass" type=JvmTypeReference
		//	("viewcategory" category=QualifiedName)? "}";
		public ParserRule getRule() { return rule; }

		//{ViewSpecification} "viewpart" id=QualifiedName "{" "viewname" viewName=STRING "viewclass" type=JvmTypeReference
		//("viewcategory" category=QualifiedName)? "}"
		public Group getGroup() { return cGroup; }

		//{ViewSpecification}
		public Action getViewSpecificationAction_0() { return cViewSpecificationAction_0; }

		//"viewpart"
		public Keyword getViewpartKeyword_1() { return cViewpartKeyword_1; }

		//id=QualifiedName
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//QualifiedName
		public RuleCall getIdQualifiedNameParserRuleCall_2_0() { return cIdQualifiedNameParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"viewname"
		public Keyword getViewnameKeyword_4() { return cViewnameKeyword_4; }

		//viewName=STRING
		public Assignment getViewNameAssignment_5() { return cViewNameAssignment_5; }

		//STRING
		public RuleCall getViewNameSTRINGTerminalRuleCall_5_0() { return cViewNameSTRINGTerminalRuleCall_5_0; }

		//"viewclass"
		public Keyword getViewclassKeyword_6() { return cViewclassKeyword_6; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_7_0() { return cTypeJvmTypeReferenceParserRuleCall_7_0; }

		//("viewcategory" category=QualifiedName)?
		public Group getGroup_8() { return cGroup_8; }

		//"viewcategory"
		public Keyword getViewcategoryKeyword_8_0() { return cViewcategoryKeyword_8_0; }

		//category=QualifiedName
		public Assignment getCategoryAssignment_8_1() { return cCategoryAssignment_8_1; }

		//QualifiedName
		public RuleCall getCategoryQualifiedNameParserRuleCall_8_1_0() { return cCategoryQualifiedNameParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	
	private ModelElements pModel;
	private ModuleElements pModule;
	private ExtendsClauseElements pExtendsClause;
	private LabelProviderElements pLabelProvider;
	private LabelSpecificationElements pLabelSpecification;
	private PropertyDescriptionProviderElements pPropertyDescriptionProvider;
	private PropertyDescriptionSpecificationElements pPropertyDescriptionSpecification;
	private FeaturesProviderElements pFeaturesProvider;
	private FeatureSpecificationElements pFeatureSpecification;
	private FormControlFactoryElements pFormControlFactory;
	private FormControlSpecificationElements pFormControlSpecification;
	private ProposalCreatorElements pProposalCreator;
	private ProposalSpecificationElements pProposalSpecification;
	private ViewerContentProviderElements pViewerContentProvider;
	private EmfFeatureAccessElements pEmfFeatureAccess;
	private WithExtendsClauseElements pWithExtendsClause;
	private PartSpecificationElements pPartSpecification;
	private ViewSpecificationElements pViewSpecification;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public EmfParsleyDslGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.emf.parsley.dsl.EmfParsleyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	importSection=XImportSection? module=Module;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Module:
	//	"module" name=QualifiedName extendsClause=ExtendsClause? "{" (labelProvider=LabelProvider? &
	//	propertyDescriptionProvider=PropertyDescriptionProvider? & featuresProvider=FeaturesProvider? &
	//	formControlFactory=FormControlFactory? & proposalCreator=ProposalCreator? &
	//	viewerContentProvider=ViewerContentProvider? & ("parts" "{" parts+=PartSpecification* "}")?) "}";
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//ExtendsClause:
	//	"extends" superType=JvmTypeReference;
	public ExtendsClauseElements getExtendsClauseAccess() {
		return (pExtendsClause != null) ? pExtendsClause : (pExtendsClause = new ExtendsClauseElements());
	}
	
	public ParserRule getExtendsClauseRule() {
		return getExtendsClauseAccess().getRule();
	}

	//LabelProvider:
	//	{LabelProvider} "labelProvider" "{" (("text" "{" labelSpecifications+=LabelSpecification* "}")? & ("image" "{"
	//	imageSpecifications+=LabelSpecification* "}")?) "}";
	public LabelProviderElements getLabelProviderAccess() {
		return (pLabelProvider != null) ? pLabelProvider : (pLabelProvider = new LabelProviderElements());
	}
	
	public ParserRule getLabelProviderRule() {
		return getLabelProviderAccess().getRule();
	}

	//LabelSpecification:
	//	parameterType=JvmTypeReference name=ValidID? "->" expression=XExpression;
	public LabelSpecificationElements getLabelSpecificationAccess() {
		return (pLabelSpecification != null) ? pLabelSpecification : (pLabelSpecification = new LabelSpecificationElements());
	}
	
	public ParserRule getLabelSpecificationRule() {
		return getLabelSpecificationAccess().getRule();
	}

	//PropertyDescriptionProvider:
	//	{PropertyDescriptionProvider} "propertyDescriptionProvider" "{" ("text" "{"
	//	labelSpecifications+=PropertyDescriptionSpecification* "}")? "}";
	public PropertyDescriptionProviderElements getPropertyDescriptionProviderAccess() {
		return (pPropertyDescriptionProvider != null) ? pPropertyDescriptionProvider : (pPropertyDescriptionProvider = new PropertyDescriptionProviderElements());
	}
	
	public ParserRule getPropertyDescriptionProviderRule() {
		return getPropertyDescriptionProviderAccess().getRule();
	}

	//PropertyDescriptionSpecification:
	//	parameterType=JvmTypeReference ":" feature=[types::JvmMember] "->" expression=XExpression;
	public PropertyDescriptionSpecificationElements getPropertyDescriptionSpecificationAccess() {
		return (pPropertyDescriptionSpecification != null) ? pPropertyDescriptionSpecification : (pPropertyDescriptionSpecification = new PropertyDescriptionSpecificationElements());
	}
	
	public ParserRule getPropertyDescriptionSpecificationRule() {
		return getPropertyDescriptionSpecificationAccess().getRule();
	}

	//FeaturesProvider:
	//	{FeaturesProvider} "featuresProvider" "{" ("features" "{" featureSpecifications+=FeatureSpecification* "}")? "}";
	public FeaturesProviderElements getFeaturesProviderAccess() {
		return (pFeaturesProvider != null) ? pFeaturesProvider : (pFeaturesProvider = new FeaturesProviderElements());
	}
	
	public ParserRule getFeaturesProviderRule() {
		return getFeaturesProviderAccess().getRule();
	}

	//FeatureSpecification:
	//	parameterType=JvmTypeReference "->" features+=[types::JvmMember] ("," features+=[types::JvmMember])*;
	public FeatureSpecificationElements getFeatureSpecificationAccess() {
		return (pFeatureSpecification != null) ? pFeatureSpecification : (pFeatureSpecification = new FeatureSpecificationElements());
	}
	
	public ParserRule getFeatureSpecificationRule() {
		return getFeatureSpecificationAccess().getRule();
	}

	//FormControlFactory:
	//	{FormControlFactory} "formControlFactory" "{" ("control" "{" controlSpecifications+=FormControlSpecification* "}")?
	//	"}";
	public FormControlFactoryElements getFormControlFactoryAccess() {
		return (pFormControlFactory != null) ? pFormControlFactory : (pFormControlFactory = new FormControlFactoryElements());
	}
	
	public ParserRule getFormControlFactoryRule() {
		return getFormControlFactoryAccess().getRule();
	}

	//FormControlSpecification:
	//	parameterType=JvmTypeReference ":" feature=[types::JvmMember] "->" expression=XExpression ("target"
	//	target=XExpression)?;
	public FormControlSpecificationElements getFormControlSpecificationAccess() {
		return (pFormControlSpecification != null) ? pFormControlSpecification : (pFormControlSpecification = new FormControlSpecificationElements());
	}
	
	public ParserRule getFormControlSpecificationRule() {
		return getFormControlSpecificationAccess().getRule();
	}

	//ProposalCreator:
	//	{ProposalCreator} "proposals" "{" proposalsSpecifications+=ProposalSpecification* "}";
	public ProposalCreatorElements getProposalCreatorAccess() {
		return (pProposalCreator != null) ? pProposalCreator : (pProposalCreator = new ProposalCreatorElements());
	}
	
	public ParserRule getProposalCreatorRule() {
		return getProposalCreatorAccess().getRule();
	}

	//ProposalSpecification:
	//	parameterType=JvmTypeReference ":" feature=[types::JvmMember] "->" expression=XExpression;
	public ProposalSpecificationElements getProposalSpecificationAccess() {
		return (pProposalSpecification != null) ? pProposalSpecification : (pProposalSpecification = new ProposalSpecificationElements());
	}
	
	public ParserRule getProposalSpecificationRule() {
		return getProposalSpecificationAccess().getRule();
	}

	//ViewerContentProvider:
	//	{ViewerContentProvider} "viewerContentProvider" "{" ("children" "{" childrenSpecifications+=LabelSpecification* "}")?
	//	"}";
	public ViewerContentProviderElements getViewerContentProviderAccess() {
		return (pViewerContentProvider != null) ? pViewerContentProvider : (pViewerContentProvider = new ViewerContentProviderElements());
	}
	
	public ParserRule getViewerContentProviderRule() {
		return getViewerContentProviderAccess().getRule();
	}

	//// a utility base class for rules which access features of an EClass
	//EmfFeatureAccess:
	//	PropertyDescriptionSpecification | FeatureSpecification | FormControlSpecification | ProposalSpecification;
	public EmfFeatureAccessElements getEmfFeatureAccessAccess() {
		return (pEmfFeatureAccess != null) ? pEmfFeatureAccess : (pEmfFeatureAccess = new EmfFeatureAccessElements());
	}
	
	public ParserRule getEmfFeatureAccessRule() {
		return getEmfFeatureAccessAccess().getRule();
	}

	//// a utility base class for rules with 'extends' clause
	//WithExtendsClause:
	//	Module;
	public WithExtendsClauseElements getWithExtendsClauseAccess() {
		return (pWithExtendsClause != null) ? pWithExtendsClause : (pWithExtendsClause = new WithExtendsClauseElements());
	}
	
	public ParserRule getWithExtendsClauseRule() {
		return getWithExtendsClauseAccess().getRule();
	}

	//PartSpecification:
	//	ViewSpecification;
	public PartSpecificationElements getPartSpecificationAccess() {
		return (pPartSpecification != null) ? pPartSpecification : (pPartSpecification = new PartSpecificationElements());
	}
	
	public ParserRule getPartSpecificationRule() {
		return getPartSpecificationAccess().getRule();
	}

	//ViewSpecification:
	//	{ViewSpecification} "viewpart" id=QualifiedName "{" "viewname" viewName=STRING "viewclass" type=JvmTypeReference
	//	("viewcategory" category=QualifiedName)? "}";
	public ViewSpecificationElements getViewSpecificationAccess() {
		return (pViewSpecification != null) ? pViewSpecification : (pViewSpecification = new ViewSpecificationElements());
	}
	
	public ParserRule getViewSpecificationRule() {
		return getViewSpecificationAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
