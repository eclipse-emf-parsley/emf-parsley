grammar org.eclipse.emf.parsley.dsl.EmfParsleyDsl with
    org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

generate model "http://www.eclipse.org/emf/parsley/dsl/EmfParsleyDsl"

Model:
	importSection=XImportSection?
	module = Module;

Module:
	'module' name=QualifiedName (extendsClause=ExtendsClause)? '{'
		(
			(labelProvider = LabelProvider)?
			&
			(tableLabelProvider = TableLabelProvider)?
			&
			(featureCaptionProvider = FeatureCaptionProvider)?
			&
			(formFeatureCaptionProvider = FormFeatureCaptionProvider)?
			&
			(dialogFeatureCaptionProvider = DialogFeatureCaptionProvider)?
			&
			(featuresProvider = FeaturesProvider)?
			&
			(tableFeaturesProvider = TableFeaturesProvider)?
			&
			(formControlFactory = FormControlFactory)?
			&
			(dialogControlFactory = DialogControlFactory)?
			&
			(proposalCreator = ProposalCreator)?
			&
			(viewerContentProvider = ViewerContentProvider)?
			&
			(partsSpecifications = PartsSpecifications)?
			&
			(treeFormFactory = TreeFormFactory)?
		)
	'}'
;

ExtendsClause: 'extends' superType=JvmTypeReference;

LabelProvider:
	{LabelProvider} 'labelProvider' '{'
		((
		'text' '{'
			labelSpecifications+=LabelSpecification*
		'}'
		)?
		&
		(
		'image' '{'
			imageSpecifications+=LabelSpecification*
		'}'
		)?)
	'}'
;

TableLabelProvider:
	{TableLabelProvider} 'tableLabelProvider' '{'
		((
		'text' '{'
			labelSpecifications+=LabelSpecificationForColumn*
		'}'
		)?
		&
		(
		'image' '{'
			imageSpecifications+=LabelSpecificationForColumn*
		'}'
		)?)
	'}'
;

LabelSpecification:
	parameterType=JvmTypeReference (name=ValidID)?
	'->'
	expression = XExpression
;


LabelSpecificationForColumn:
	parameterType=JvmTypeReference ':' feature=[types::JvmMember]
	'->'
	expression = XExpression
;

FeatureCaptionProvider:
	{FeatureCaptionProvider} 'featureCaptionProvider' '{'
		((
		'text' '{'
			specifications+=FeatureAssociatedExpression*
		'}'
		)?)
	'}'
;

FormFeatureCaptionProvider:
	{FormFeatureCaptionProvider} 'formFeatureCaptionProvider' '{'
		((
		'text' '{'
			specifications+=FeatureAssociatedExpression*
		'}'
		)?
		&
		(
		'label' '{'
			labelSpecifications+=FeatureAssociatedExpression*
		'}'
		)?)
	'}'
;

DialogFeatureCaptionProvider:
	{DialogFeatureCaptionProvider} 'dialogFeatureCaptionProvider' '{'
		((
		'text' '{'
			specifications+=FeatureAssociatedExpression*
		'}'
		)?
		&
		(
		'label' '{'
			labelSpecifications+=FeatureAssociatedExpression*
		'}'
		)?)
	'}'
;

/**
 * Specify an XExpression associated to an EStructuralFeature
 * (actually we associated to the Java get method in the generated code, which
 * corresponds to the original EStructuralFeature).
 */
FeatureAssociatedExpression:
	parameterType=JvmTypeReference ':' feature=[types::JvmMember]
	'->'
	expression = XExpression
;

FeaturesProvider:
	{FeaturesProvider} 'featuresProvider' '{'
		((
		'features' '{'
			featureSpecifications+=FeatureSpecification*
		'}'
		)?)
	'}'
;


TableFeaturesProvider:
	{TableFeaturesProvider} 'tableFeaturesProvider' '{'
		((
		'features' '{'
			featureSpecifications+=FeatureSpecification*
		'}'
		)?)
	'}'
;


FeatureSpecification:
	parameterType=JvmTypeReference
	'->'
	features += [types::JvmMember] (',' features += [types::JvmMember])*
;

FormControlFactory:
	{FormControlFactory} 'formControlFactory' '{'
		(
		'control' '{'
			controlSpecifications+=ControlFactorySpecification*
		'}'
		)?
	'}'
;

DialogControlFactory:
	{DialogControlFactory} 'dialogControlFactory' '{'
		(
		'control' '{'
			controlSpecifications+=ControlFactorySpecification*
		'}'
		)?
	'}'
;

ControlFactorySpecification:
	parameterType=JvmTypeReference ':' feature=[types::JvmMember]
	'->'
	expression = XExpression
	('target' target = XExpression)?
;

ProposalCreator:
	{ProposalCreator} 'proposals' '{'
		proposalsSpecifications+=ProposalSpecification*
	'}'
;

ProposalSpecification:
	parameterType=JvmTypeReference ':' feature=[types::JvmMember]
	'->'
	expression = XExpression
;

ViewerContentProvider:
	{ViewerContentProvider} 'viewerContentProvider' '{'
		((
		'elements' '{'
			elementsSpecifications+=LabelSpecification*
		'}'
		)?
		&
		(
		'children' '{'
			childrenSpecifications+=LabelSpecification*
		'}'
		)?)
	'}'
;

// a utility base class for rules which access features of an EClass
EmfFeatureAccess:
	FeatureAssociatedExpression |
	FeatureSpecification |
	ControlFactorySpecification |
	ProposalSpecification |
	LabelSpecificationForColumn
;

// a utility base class for rules with 'extends' clause
WithExtendsClause:
	Module
;

PartsSpecifications:
	{PartsSpecifications} 'parts' '{'
		parts += PartSpecification*
	'}'
;

PartSpecification: ViewSpecification;

ViewSpecification:
	{ViewSpecification} 'viewpart' id=QualifiedName '{'
		'viewname' viewName=STRING
		'viewclass' type=JvmTypeReference
		('viewcategory' category=QualifiedName)?
	'}'
;

TreeFormFactory:
	{TreeFormFactory} 'treeFormFactory' '{'
		orientation = TreeFormOrientation
		('(' treeWeight = INT ':' formWeight = INT ')')?
	'}'
;

enum TreeFormOrientation:
	VERTICAL= 'vertical' | 
	HORIZONTAL= 'horizontal'
;
