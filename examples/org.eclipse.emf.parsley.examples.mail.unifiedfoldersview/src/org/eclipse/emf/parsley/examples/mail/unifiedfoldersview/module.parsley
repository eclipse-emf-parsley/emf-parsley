import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.parsley.examples.mail.Folder
import org.eclipse.emf.parsley.examples.mail.accountsview.AccountsviewEmfParsleyGuiceModuleGen
import org.eclipse.emf.parsley.examples.mail.unifiedfoldersview.UnifiedFolderContainer
import org.eclipse.emf.parsley.examples.mail.unifiedfoldersview.UnifiedFoldersView
import org.eclipse.emf.parsley.examples.mail.accountsview.ui.provider.AccountsviewLabelProviderGen

/* org.eclipse.emf.parsley.examples.mail.unifiedfoldersview Emf Parsley Dsl Module file */
module org.eclipse.emf.parsley.examples.mail.unifiedfoldersview extends AccountsviewEmfParsleyGuiceModuleGen {
	
	parts {
		viewpart org.eclipse.emf.parsley.examples.mail.unifiedfoldersview {
			viewname "Unified Folders"
			viewclass UnifiedFoldersView
		}
	}
	
	labelProvider extends AccountsviewLabelProviderGen {
		text {
			UnifiedFolderContainer -> containerName
			// instead of 
			// Folder -> (eContainer as Account).email
			// we can rely on the label provider we inherit from
			// and take the text of the container
			Folder -> getText(eContainer)
		}
		image {
			UnifiedFolderContainer -> containerName.toFirstLower + ".gif"
			Folder -> "account.gif"
		}
	}
	
	viewerContentProvider {
		elements {
			Resource resource -> {
				newArrayList(
					new UnifiedFolderContainer("Inbox", resource),
					new UnifiedFolderContainer("Sent", resource),
					new UnifiedFolderContainer("Trash", resource))
			}
		}
		
		children {
			UnifiedFolderContainer c -> {
				c.resource.allContents.
				filter(Folder).
				filter[name == c.containerName]
			}
			Folder -> { emptyList }
		}
	}
	
}
