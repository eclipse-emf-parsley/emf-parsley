chapter:MigrationGuide[Migration Guide]

section:FiveMinors[From 0.5.0 to 0.5.2]

ul[
item[label provider for trees and table label providers for tables can now specify declaratively custom
fonts, foreground and background colors.

For tables, you can customize the font, foreground and background color for the entire row or for a single
cell.

Here are some examples:

code[EmfParsley][
labelProvider{
...
	font {
		Book -> // must return a org.eclipse.swt.graphics.Font
	}
	foreground {
		Book -> // must return a org.eclipse.swt.graphics.Color
	}
	background {
		Book -> // must return a org.eclipse.swt.graphics.Color
	}
}
]

code[EmfParsley][
tableLabelProvider {
...	
	font {
		Library : name -> JFaceResources.getFontRegistry().getBold(JFaceResources.DEFAULT_FONT)
	}
	
	foreground {
		Library : books -> Display.getCurrent().getSystemColor(SWT.COLOR_BLUE)
	}
	
	background {
		Library : address -> Display.getCurrent().getSystemColor(SWT.COLOR_GREEN)
	}
	
	rowFont {
		Library -> JFaceResources.getFontRegistry().getBold(JFaceResources.DEFAULT_FONT)
	}
	
	rowForeground {
		Library -> Display.getCurrent().getSystemColor(SWT.COLOR_BLUE)
	}
	
	rowBackground {
		Library -> Display.getCurrent().getSystemColor(SWT.COLOR_GREEN)
	}
}
]
]
]

section:FourFive[From 0.4 to 0.5]

ul[
item[e[ViewerInitializer] has been removed: all creation and initialization of viewers
is performed using codeRef[org.eclipse.emf.parsley.viewers.ViewerFactory]; its API has been
revised and simplified.]
item[the packages e[factories] and e[builders] have been removed
and their classes have been moved to other packages.
If you get compiler errors, a simple "Organize Imports" should fix
the imports.  If you use the DSL a simple regeneration should fix things.]
item[e[IViewerMouseListener] has been moved from the e[listeners]
package to the e[viewers] package.]
item[classes in e[editor.outline] have been moved into e[editors]
package.]
item[The creation of caption labels for forms and dialogs has slightly
changed, concerning the default behavior
(link[https://bugs.eclipse.org/bugs/show_bug.cgi?id=472691][https://bugs.eclipse.org/bugs/show_bug.cgi?id=472691]):
we take the text from codeRef[org.eclipse.emf.edit.provider.IItemPropertyDescriptor] if
the EObject provides it. (This does not happen for table column headers, since we don't have
any EObject when we build the table columns).
If you used to call this method on a
codeRef[org.eclipse.emf.parsley.ui.provider.FormFeatureCaptionProvider] or
codeRef[org.eclipse.emf.parsley.ui.provider.DialogFeatureCaptionProvider]

code[Java][
public Label getLabel(Composite parent, EClass eClass, EStructuralFeature feature)
]

be warned that this method has changed its signature into

code[Java][
public Label getLabel(Composite parent, EObject o, EStructuralFeature feature)
]

and of course also its semantics, since you need to pass an EObject not its EClass.
]
item[a new method is available in codeRef[org.eclipse.emf.parsley.edit.action.EditingMenuBuilder],
e[actionChange]: If you want to implement more complex menu commands that do not
only add elements to a container, you can use the method
e[actionChange], specifying the label for the menu, the model's element
that will be affected by the changes specified as a lambda expression
(the third argument).  The lambda expression will also get the specified
model's element as argument.  (This is related to
link[https://bugs.eclipse.org/bugs/show_bug.cgi?id=475188][https://bugs.eclipse.org/bugs/show_bug.cgi?id=475188]).
Please also have a look at the updated documentation of section ref:ContextualMenu[Contextual Menu]:
the already existing e[actionAdd] should be used with care, since it might leave the model
with dangling references -- with that respect we also updated the first example
ref:FirstExample[First Example], so that
it uses e[actionChange] to implement correctly what we used to achieve with e[actionAdd].
]
item[Adding context menu to a viewer has been extremely simplified
(link[https://bugs.eclipse.org/bugs/show_bug.cgi?id=455727][https://bugs.eclipse.org/bugs/show_bug.cgi?id=455727]):
A context menu can be added to any codeRef[org.eclipse.jface.viewers.StructuredViewer] by using an
injected codeRef[org.eclipse.emf.parsley.menus.ViewerContextMenuHelper]. This provides some
methods for adding the context menu

code[Java][
@Inject ViewerContextMenuHelper contextMenuHelper;
(...)

// simplest form
contextMenuHelper.addViewerContextMenu(viewer);

// if you have an AdapterFactoryEditingDomain already
contextMenuHelper.addViewerContextMenu(viewer, editingDomain);

// if you're inside an IWorkbenchPart
contextMenuHelper.addViewerContextMenu(viewer, editingDomain, part);
]
]
item[Drag and drop support has been separated from context menu support
(link[https://bugs.eclipse.org/bugs/show_bug.cgi?id=475914][https://bugs.eclipse.org/bugs/show_bug.cgi?id=475914]):
thus, adding context menu does NOT automatically add drag and drop.

Drag and drop can be added to any codeRef[org.eclipse.jface.viewers.StructuredViewer] by using an
injected codeRef[org.eclipse.emf.parsley.edit.ui.dnd.ViewerDragAndDropHelper],
using its methods e[addDragAndDrop].
]
item[
Saveable table views and table views reacting on selection
do not require an implementation of the method
e[getContents()], which has also been removed from the API, from the
codeRef[org.eclipse.emf.parsley.config.Configurator] methods, and from
the e[configurator] section in the DSL: contents retrieval is completely
delegated to the new codeRef[org.eclipse.emf.parsley.edit.ui.provider.TableViewerContentProvider],
whose default implementation is able to automatically retrieve all the
contents of a given type (i.e., EClass) automatically.
The DSL provides the new e[tableViewerContentProvider] specification,
see the new section ref:TableViewerContentProvider[Table Viewer Content Provider].
]
item[
Similarly, table views reacting on selection
do not require an implementation of the method
e[getEStructuralFeature()]: they require an implementation of
e[getEClass()] which specifies the type of the objects to be
shown in the table.
e[getEStructuralFeature()] has also been removed from the API, from the
codeRef[org.eclipse.emf.parsley.config.Configurator] methods, and from
the e[configurator] section in the DSL: contents retrieval is not
performed using a feature (which is limitative): it is completely
delegated to the new codeRef[org.eclipse.emf.parsley.edit.ui.provider.TableViewerContentProvider],
whose default implementation is able to automatically retrieve all the
contents of a given type (i.e., EClass) automatically.
]
]

section:ThreeFour[From 0.3 to 0.4]

ul[
item[e[EmptyResourceInitializer] has been removed: you should now use
codeRef[org.eclipse.emf.parsley.resource.ResourceManager],
see section ref:ResourceManager[Resource Manager]]
item[e[ResourceSaveManager] has been removed: you should now use
codeRef[org.eclipse.emf.parsley.resource.ResourceSaveStrategy],
see section ref:ResourceSaveStrategy[Resource Save Strategy]
]
item[Project wizards have been redesigned: they generate a e[module.parsley]
that uses the e[configurator] for specifying required information
(see section ref:Configurator[Configurator] and the updated
first example, section ref:FirstExample[First Example])]
]